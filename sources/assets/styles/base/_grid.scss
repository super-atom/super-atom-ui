@use 'sass:math';

@import '../dev-core.scss';
// FLEXBOX CSS GRID
// by Laptev Pavel

// VARiABLES
// desktop grid
$grid-desktop-columns: 12;
$grid-desktop-sideMargin: 0px;
$grid-desktop-gutter: 40px;
$grid-desktop-breakpoint: $bp-max-xl;

// tablet grid
$grid-tablet-columns: 12;
$grid-tablet-sideMargin: 0px;
$grid-tablet-gutter: 30px;
$grid-tablet-breakpoint: $bp-max-lg;

// mobile grid
$grid-mobile-columns: 4;
$grid-mobile-sideMargin: 0px;
$grid-mobile-gutter: 20px;
$grid-mobile-breakpoint: $bp-max-sm;

// pixels to % variables
$desk-grid-width: 100% -
  (math.div($grid-desktop-sideMargin * 2, $grid-desktop-breakpoint) * 100%);
$tab-grid-width: 100% -
  (math.div($grid-tablet-sideMargin * 2, $grid-tablet-breakpoint) * 100%);
$mob-grid-width: 100% -
  (math.div($grid-mobile-sideMargin * 2, $grid-mobile-breakpoint) * 100%);

$desk-gutter: (
  math.div(
      $grid-desktop-gutter,
      $grid-desktop-breakpoint - ($grid-desktop-sideMargin * 2)
    ) * 100%
);
$tab-gutter: (
  math.div(
      $grid-tablet-gutter,
      $grid-tablet-breakpoint - ($grid-tablet-sideMargin * 2)
    ) * 100%
);
$mob-gutter: (
  math.div(
      $grid-mobile-gutter,
      $grid-mobile-breakpoint - ($grid-mobile-sideMargin * 2)
    ) * 100%
);

// FUNCTIONS AND MiXINS
@function col-width($i, $columns) {
  @return math.div(100%, $columns) * $i;
}

@mixin col-props($i, $columns, $gutter) {
  box-sizing: border-box;
  width: col-width($i, $columns);
  padding-left: $gutter * 0.5;
  padding-right: $gutter * 0.5;
}

@mixin columns-loop($name, $columns, $gutter) {
  @for $i from 0 through $columns {
    &-#{$name}-#{$i} {
      @include col-props($i, $columns, $gutter);
    }
    &-#{$name}-shift-#{$i} {
      margin-left: col-width($i, $columns);
    }
  }
}

@mixin grid-base($width) {
  box-sizing: border-box;
  display: flex;
  margin-left: auto;
  margin-right: auto;
  flex-wrap: wrap;
  max-width: $grid-desktop-breakpoint;
  width: $width;
}
